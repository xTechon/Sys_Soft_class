# last word of memory addres is 7FFD
#
CLOCK     START     1000    # title the program CLOCK
#
# SECONDS   WORD      7FFD    # Address of where the time since midnight in seconds is stored
DEVICE    WORD      64      # LCD panel device number
SEC       RESW      1
MIN       RESW      1
HR        RESW      1
ARG1      RESW      1
ARG2      RESW      1
HR1       RESW      1       # format is HR1HR2 MIN1MIN2
HR2       RESW      1
MIN1      RESW      1
MIN2      RESW      1
#
## store numerical litterals
#
ZERO      WORD      0       
ONE       WORD      1
TWO       WORD      2
THREE     WORD      3
FOUR      WORD      4
FIVE      WORD      5
SIX       WORD      6
SEVEN     WORD      7
EIGHT     WORD      8
NINE      WORD      9
TEN       WORD      10
TWELVE    WORD      12
FOUR8     WORD      48
SIXTY     WORD      60
HUN       WORD      100
AMPM      BYTE      X,'800000'
#
## store character litterals
#
BZERO     BYTE      C,'0'  
BONE      BYTE      C,'1'
BTWO      BYTE      C,'2'
BTHREE    BYTE      C,'3'
BFOUR     BYTE      C,'4'
BFIVE     BYTE      C,'5'
BSIX      BYTE      C,'6'
BSEVEN    BYTE      C,'7'
BEIGHT    BYTE      C,'8'
BNINE     BYTE      C,'9'
AM        BYTE      C,'A'
PM        BYTE      C,'P'
#
## Gather time units since midnight
#
UPDATE    LDA       SECOND     # put the seconds in the A reg
          STA       SEC        # store the number of seconds since midnight
          DIV       SIXTY      # div seconds by 60
          STA       MIN        # store min since midnight from A reg
          DIV       SIXTY      # div min by 60
          STA       HR         # store hours since midnight from A reg
          LDA       SIXTY      # load 60 in the A reg
          STA       ARG2       # store 60 in ARG2
          LDA       MIN        # load the min since midnight into the A reg
          JSUB      MOD        # call mod function
          STA       MIN        # change min since midnight into min of hour
# store mins into memory
          DIV       TEN        # Get the tens place of the mins
          ADD       FOUR8      # convert to ASCII
          STA       MIN1       # store the tens place of the mins
          LDA       TEN        # load 10 into the A reg
          STA       ARG2       # store 10 into ARG2
          LDA       MIN        # reload mins into A reg
          JSUB      MOD        # run mod operation on mins
          ADD       FOUR8      # convert to ASCII
          STA       MIN2       # store the ones place in memory
#
## Check if 24 or 12 hour
#
          LDA       SEC        # put the seconds since midnight into the A reg
          AND       AMPM       # isolate the most significant bit
          COMP      AMPM       # run the comparison
          JEQ       HOUR       # Jump to 24 hour behavior if last bit is 1
#
## 12 hour behavior
#
APHOUR    LDA       HR         # load the hours since midnight
          OR        AMPM
          COMP      TWELVE     # compare hours since midnight to 12
          JLT       HOUR       # goto 24 hour behavior if less than 12
          SUB       TWELVE     # subtract 12 from the hours 
#
## 24 hour behavior
#
HOUR      LDA       HR         # load the number of hours into A reg
          DIV       TEN        # Get the first digit of the hour
          ADD       FOUR8      # convert to ASCII
          WD        DEVICE     # write to device
          STA       HR1        # Store the digit
          LDA       TEN        # load 10 into the A reg
          STA       ARG2       # store 10 into ARG2 for the mod func
          LDA       HR         # reload HR into A reg
          JSUB      MOD        # run mod op routine
          ADD       FOUR8      # convert to ASCII
          WD        DEVICE     # write to device
          STA       HR2        # store the ones place into memory
#
## Modulo op
## A % ARG2 = result in A reg
#
MOD       SUB       ARG2       # sub A reg by ARG 2
          COMP      ZERO       # compare the A reg to zero
          JGT       MOD        # loop back if greater than zero
          JEQ       RET        # skip to return if equal to zero
# Loop end
          ADD       ARG2       # go back 1 step to get the remainder
RET       RSUB
# End Modulo op
#
## Output to device
#
FRESH     WD        DEVICE     # update LCD display
#
## Terminate Routine
#
DONE      LDL       ZERO
# Reserve space for seconds
SECOND   RESW      1          # reserve the last word in memory
          RSUB
          END       UPDATE     # Needs symbol of the first instruction
