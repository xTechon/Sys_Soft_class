SIC base model Assembler

Usage: ./project1 [filepath]

Pass 1:
In pass 1 of the SIC base model Assembler, only a symbol table is printed.
The symbol table is stored using a binary tree data structure and is printed in alphabetical order.

The Assembler comes with a list of valid opcodes in the file "SIC_Instructions.csv" and will
not run without the inclusion of "SIC_Instructions.csv".

Opcodes are stored by reading the opcode file and storing them in a hash table for fast referencing.

The Assembler catches errors in the code and syntax such as:
- duplicate symbols
- invalid hex constants
- symbols that do not fit the Assembly Language Specification
- programs that exceed the SIC memory limit
- assembly files that contain blank lines against the specification
- word constants that exceed the maximum integer limit

Errors thrown by the assembler will list the line of the error.
Additionally, Symbols thrown with an error code less than 0 match an Assembler Directive

------------------------------------------------Pass-2------------------------------------------------

Pass 2:
In pass 2 of the SIC base model Assembler, the assebly code is parsed again from the
beginning to generate object code.
The Symbol table was needed in pass 1 to add the ability to use addresses that may occur later
in the assembly file that a 1 pass assembler would not have access to.

As with pass 1, the Assembler will not run without the inclusion of "SIC_Instructions.csv"

With this new version, more errors can be detected in adition to the errors from Pass 1:
- Missing a START directive in the assembly file
- Attempting to use a Symbol that doesn't exist

If any errors are detected a File will not be written to the computer
If there are no errors detected, a File containg the object code with ".obj" appended
to the end will be placed in the same directory as the ".sic" file passed to the assembler
